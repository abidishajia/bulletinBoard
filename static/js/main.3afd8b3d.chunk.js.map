{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","state","editing","randomBetween","x","y","s","Math","ceil","random","randomColor","toString","substr","edit","_this","setState","remove","e","preventDefault","props","deleteNote","note","id","save","onUpdate","newText","value","cancel","this","style","right","window","innerWidth","top","innerHeight","transform","concat","backgroundColor","_this2","react_default","a","createElement","className","onSubmit","ref","input","defaultValue","fa","onClick","renderForm","renderDisplay","Component","Board","notes","updateNote","i","prevState","map","Object","objectSpread","nextId","uniqueId","addNote","text","toConsumableArray","filter","src_Note","key","bind","Boolean","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3afd8b3d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FaPencilAlt } from 'react-icons/fa';\nimport { FaTrash } from 'react-icons/fa';\nimport { FaSave } from 'react-icons/fa';\nimport { FaTimesCircle } from 'react-icons/fa';\n\n\nclass Note extends Component {\n    state = {\n        editing: false\n    }\n\n    componentWillMount() {\n        this.style = {\n            right: this.randomBetween(0, window.innerWidth - 150, 'px'),\n            top: this.randomBetween(0, window.innerHeight - 150, 'px'),\n            transform: `rotate(${this.randomBetween(-25, 25, 'deg')})`,\n            backgroundColor: this.randomColor()\n\n        }\n    }\n\n    randomBetween = (x,y,s) => {\n        return x + Math.ceil(Math.random() * (y-x)) + s\n    }\n\n    randomColor = () => {\n        return '#'+Math.random().toString(16).substr(-6);\n    }\n\n    edit = () => {\n        this.setState({\n            editing: true\n        })\n    }\n\n    remove = (e) => {\n        e.preventDefault()\n        this.props.deleteNote(this.props.note.id)\n    }\n\n    save = (e) => {\n        e.preventDefault()\n        this.props.onUpdate(this.newText.value, this.props.note.id)\n        this.setState({\n            editing: false\n        })\n    }\n\n    cancel = () => {\n        this.setState({\n            editing: false\n        })\n    }\n\n    \n\n    renderForm() {\n        return(\n            <div className=\"note\"  style={this.style}>\n                <form onSubmit={this.save}>\n                    <textarea ref={input => this.newText = input} defaultValue={this.props.note.note}/>\n                    <button id=\"save\"> <FaSave /></button>\n                    <button id=\"cancel\"> <FaTimesCircle /></button>\n\n                </form>\n            </div>\n        )\n    }\n \n    renderDisplay() { \n        const {note} = this.props\n        return (  \n            <div \n                className=\"note\" \n                style={this.style}  >\n                \n\n                <p> {note.note}</p>\n                <span> \n                    <button id=\"edit\" onClick={this.edit}> <FaPencilAlt /> </button>\n                    <button id=\"remove\" onClick={this.remove}> <FaTrash /> </button>\n                </span>\n            </div>\n        );\n    }\n\n    render(){\n        return this.state.editing ? this.renderForm() : this.renderDisplay()\n    }\n}\n \nexport default Note;","import React, { Component } from 'react';\nimport Note from './Note'\nimport { FaPlus } from 'react-icons/fa';\n\nclass Board extends Component {\n    state = { \n        notes: []\n    }\n\n    updateNote = (newText, i) => {\n       this.setState(prevState => ({\n            notes: prevState.notes.map(\n                note => (note.id !== i) ? note : {...note, note: newText}\n            )\n       }))\n    }\n\n    nextId = () => {\n        this.uniqueId = this.uniqueId || 0\n        return this.uniqueId ++\n    }\n\n    addNote = (text) => {\n        this.setState(prevState => ({\n            notes : [\n                ...prevState.notes, \n                {\n                    id: this.nextId(),\n                    note: text\n                }\n            ] \n       }))\n    }\n\n    deleteNote = (id) => {\n        this.setState(prevState => ({\n            notes: prevState.notes.filter(note => note.id !== id)\n       }))\n    }\n\n    render() { \n        return ( \n            <div className=\"board\">\n                {this.state.notes.map((note, i) => {\n                    return (\n                        <Note \n                            key={note.id}\n                            note={note} \n                            onUpdate = {this.updateNote} \n                            deleteNote = {this.deleteNote}\n                            />\n                    )\n                })}\n\n                <button onClick={this.addNote.bind(null, 'New Note')} id=\"add\"> \n                    <FaPlus />\n                </button>\n            </div>\n         );\n    }\n}\n \nexport default Board;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}